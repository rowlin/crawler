{% extends 'base.html.twig' %}

{% block title %}Manual{% endblock %}

{% block body %}


<div class="content">
    <h1>Документация к проекту и просто заметки </h1>

    <h2><em>Зачем этот проект - какую проблему решает</em></h2>

    <p>В настоящее время очень большое колличество информационных ресурсов, посредством которых люди деляться информацией.</p>

    <p>Путем проведения успешной рекламной компании или действиями(SEO) удается популиризировать сайт(ресурс) среди определенного круга людей.</p>

    <p><b>Пример(1)</b>: для поиска постоянной работы в сфере it существует множество ресурсов: cvkeskus.ee, cv.ee, linkedin.com, djinni.co .. группы в facebook..</p>
    <p>Практически ежедневно появляются новые объявления.<p>
    <p>Пользователь заходит на ресурс с целью найти объявление о работе, и в случае если оно его устраивает - откликнуться.</p>
    <p>Ежедневно проверять каждый из ресурсов - на это действие уходит очень много времени.</p>

    <p><b>Пример(2)</b>: для поиска заказов по it тематике, приходится постояно мониторить популярные биржи upwork.com, goworkabit.ee, weblancer.ee, freelance.ee. Это рутинная работа, на которую уходит куча времени.</p>

    <p><b>Пример(3)</b>: необходимо размещать объявление на ряде тогровых площадок с определенной периодичностью, данная работа рутинная и требует много времени.</p>
    <p>Что если выше приведенные действия возможно автоматизировать - получать информацию с сайтов поиски работы, которая удовлетворяет вашей выборке, получать заказы, размещать объевления с одной формы по всем возмождным ресурсам..</p>


    <p>Данный проект представляет из себя админнку для автоматизации действий в браузере. </p>

    <i>Сравнения доступных инструментов </i>
    <p>В настоящее время есть большое колличество инструментов решающих  данную проблему (как платные - так и бесплатные)</p>
    Популярные из них :
    <ul style="list-style: none">
        <li><a href="https://github.com/bablosoft/BAS" target="_blank">Bas</a>  Browser automation studio (имеет платную и бесплатные версии) </li>
        <li><a href="https://zennolab.com" target="_blank">Zennoposter</a>  (платное решение) </li>
    </ul>

    <p>Данные решения зарекомендовали себя и пользуются успехом .</p>

    <p><s><em>Если вы не знакомы с этими решениями - обязательно ознакомьтесь - уверен на 99% они способны решить ваши задачи.</em></s></p>

    <h4>Как запустить</h4>
    <p>Выполните в терминале :</p>
    <code>
        git clone https://github.com/rowlin/crawler
        <br/>
         cd ./crawler
        <br/>
         make sh
    </code>

    <h3>Архитектура проекта </h3>

    <p>Проект собран из нескольких docker образов.</p>


    !!!тут изображение


    <p>Админка представляет из себя приложение на базе Symfony 6 и Vue 2 и служит для запуска процессов,которые запускаются и исполняюся в эмуляторе браузера Puppetter</p>

    <p>Важно понимать - при выполнении определенной работы - пораждается полноценный браузер . и работу - открытии нескольких вкладок (выполнение скрипта) на нескольних сатах можно формировать в одном скрипте. </p>


    <h3>Нюансы использования</h3>
    <p>Надо отметить , что данный проект , служит инструментом для запуска готовых скриптов (предорставленные сценарии используюся только для ознакомления и возможно , последующего использования в качестве шаблона)</p>

    <p>Разрабатывать что - либо или тестировать скрипты не ракомендуется!</p>

    <p>Локальную разработку лучше вести внутри любимого редактора а тестировать скрипт - использую команду node your_script.js (данная каманда запустит браузер ).</p>

    <h2>Todo :</h2>
    <ul style="list-style: none">
        <li>Решить проблемы с редактором</li>
        <li>Покрыть проверочными тестами операции с telegram ботами </li>
        <li>Написать пример использзования </li>
        <li>Добавить докер контейнер для тестирования puppetter скриптов</li>
        <li>Добавить обработку webhook от telegram </li>
        <li>Продумать интерефейс для коммуникации с ботом </li>
        <li>Cделать возможность выгрузки результатов на стороннее Api</li>
        <li>Добавить обратку(новых результатов) в очередь (задать delay между событиями)</li>
        <li>Pagination для вывода результатов</li>
    </ul>

    <h2>Пример использования</h2>

    <h3>Парсинг сайтов</h3>

    <p>Для парсинга сайта создадим новый файл test.js в директории crawler/puppetter/  </p>
    <code>
        $ cd crawler/puppetter/
        <br/>
        $ touch test.js
    </code>

    <p>Для примера :</p>


    <p>Для парсинга существует большое колличество инструментов </p>
    <ul>
        <li>
            <a href="">Curl </a>
        </li>
        <li>
            <a href="">Puppetter</a>
        </li>
        <li>
            <a href=" ">Playwright</a>
        </li>
        <li>
            <a href="">Selenium</a>
        </li>
    </ul>

    <p> Так же имеется пакет  <a href="">puppetter-extra</a> который дополняет тот же puppetter или Playwright необходимыми плагинами</p>

    <a href="https://github.com/berstend/puppeteer-extra/wiki">Здесь отличная заметка с советами на тему использования </a> и рекомендация
    почему необходимо использовать
    <a href="https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth">puppeteer-extra-plugin-stealth</a>



    blog

    https://antoinevastel.com/

    https://datadome.co/bot-management-protection/detecting-headless-chrome-puppeteer-extra-plugin-stealth/

    https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/


<pre>
const puppeteer = require("puppeteer");
const userAgent = require('user-agents');

(async () => {
    const browser = await puppeteer.launch(
        { headless: false , devtools: true}
    );
    const page = await browser.newPage();
    await page.setUserAgent(userAgent.toString());
    await page.setViewport({
        width: 1240,
        height: 800,
        deviceScaleFactor: 1,
    });
    await page.goto('https://www.weblancer.net/jobs/veb-programmirovanie-31/', { waitUntil: 'networkidle2' });

    await page.waitForSelector('#tab_pane-main > div.page_content.d-flex.flex-column > div.cols_table.divided_rows');


    const result = await page.evaluate(() => {


        let productNodes = Array.from(document.querySelectorAll(`.row.click_container-link.set_href`));
        const res = [];
        productNodes.forEach( (el, i) => {
            return res[i] =
                  {
                  'url' : el.querySelector('a.text-bold').href,
                  'text' :  [ el.querySelector('a.text-bold').innerText ,
                      el.querySelector('.text_field.text-inline').innerText,
                      el.querySelector(`a.text-muted.data_url`).innerText,
                  ],

                 }
        });

        return res;
    });

    //  await browser.close();
})();

</pre>
<br/>
<p>Оборачиваем функционал в функцию async run( page, browser) <s>  которая принимает в себя page и browser</s></p>
<p>Что бы протестировать ее работу - можно в файл test_request.http (что расположен в корне проекта ) <s>добавить</s> метод</p>
<br/>
<pre>
POST http://localhost:3000/scrape
Content-Type: text/html

async function run(page , browser) {

await page.goto('https://www.weblancer.net/jobs/veb-programmirovanie-31/', {waitUntil: 'networkidle2'});

await page.waitForSelector('#tab_pane-main > div.page_content.d-flex.flex-column > div.cols_table.divided_rows');


return await page.evaluate(() => {


let productNodes = Array.from(document.querySelectorAll(`.row.click_container-link.set_href`));
const res = [];
productNodes.forEach((el, i) => {
return res[i] =
{
'url': el.querySelector('a.text-bold').href,
'text': [el.querySelector('a.text-bold').innerText,
el.querySelector('.text_field.text-inline').innerText,
el.querySelector(`a.text-muted.data_url`).innerText,
],

}
});

return res;
});
}

</pre>

<p>Выполнив запрос - должны увидеть массив из результатов , который должен включать в себя <'string'>"url" и <'array'>"text". </p>

<p>Далее создаем в aдминке задание - в поле Code - вводим функцию</p>
<p>То есть для получения результата с нескольких страниц выполним следуюший код   </p>

    <pre>
            async function goWeblancer(page ,i ,  browser) {
        await page.goto('https://www.weblancer.net/jobs/veb-programmirovanie-31/?page=' + i, {waitUntil: 'domcontentloaded'});
               await page.waitForSelector('#tab_pane-main > div.page_content.d-flex.flex-column > div.cols_table.divided_rows');
                 return await page.evaluate(() => {
                    let productNodes = Array.from(document.querySelectorAll(`.row.click_container-link.set_href`));
                    const res = [];
                    productNodes.forEach((el, i) => {
                            return res[i] =
                                {
                                    'url': el.querySelector('a.text-bold').href,
                                    'text': [el.querySelector('a.text-bold').innerText,
                                        el.querySelector('.text_field.text-inline').innerText,
                                        el.querySelector(`a.text-muted.data_url`) ? el.querySelector(`a.text-muted.data_url`).innerText : "",
                                    ],
                                }

                    });
                    return res;
        });
    }

   async function run()
    {
        var data = [];
        for (var i = 1; i < 10; i++) {
            let r = await goWeblancer(page, i, browser);
            console.log(r.length);
            data.push(...r);
        }
        console.log(data.length);
        return data;
    }
    </pre>

    <p>Где метод run()  запускает цикл </p>

    <p>Выбираеем бота и канал - куда постить </p>
    <p>Проверяем что получилось на выходе - в случае необходимости - изменяем </p>
    <p>В случае, если ответ содержит слова , которе не нужны - можно их удалить - добавив 'add sense' нежелаемое выражение</p>

    <h2>Заметки</h2>

    <p>Cookies</p>
    https://rag0g.medium.com/using-cookies-to-speed-up-puppeteer-and-playwright-scripts-38eb413439f8

    <p>Использование proxy</p>
<pre>
    const browser = await puppeteer.launch({
    // Launch chromium using a proxy server on port 9876.
    // More on proxying:
    //    https://www.chromium.org/developers/design-documents/network-settings
    args: [
    '--proxy-server=127.0.0.1:9876',
    // Use proxy for localhost URLs
    '--proxy-bypass-list=<-loopback>',
    ],
    });
</pre>
</div>
{% endblock %}
